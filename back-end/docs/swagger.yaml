basePath: /api
definitions:
  echo.HTTPError:
    properties:
      message: {}
    type: object
  github_com_mxngocqb_VCS-SERVER_back-end_internal_model.Role:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  github_com_mxngocqb_VCS-SERVER_back-end_internal_model.Server:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      ip:
        type: string
      name:
        type: string
      status:
        type: boolean
      updatedAt:
        type: string
    type: object
  github_com_mxngocqb_VCS-SERVER_back-end_internal_model.User:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      password:
        description: Password should be hashed and never returned in API calls
        type: string
      role_ids:
        items:
          type: integer
        type: array
      roles:
        items:
          $ref: '#/definitions/github_com_mxngocqb_VCS-SERVER_back-end_internal_model.Role'
        type: array
      updatedAt:
        type: string
      username:
        type: string
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  internal_handler_auth_transport.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  internal_handler_server_transport.CreateRequest:
    properties:
      ip:
        type: string
      name:
        type: string
      status:
        type: boolean
    required:
    - ip
    - name
    - status
    type: object
  internal_handler_server_transport.ImportServerResponse:
    properties:
      lists_fail:
        items:
          type: string
        type: array
      lists_success:
        items:
          type: string
        type: array
      message:
        type: string
      total_fail:
        type: integer
      total_success:
        type: integer
    type: object
  internal_handler_server_transport.ServerResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/github_com_mxngocqb_VCS-SERVER_back-end_internal_model.Server'
        type: array
      total:
        type: integer
    type: object
  internal_handler_server_transport.UpdateRequest:
    properties:
      ip:
        type: string
      name:
        type: string
      status:
        type: boolean
    required:
    - ip
    - name
    type: object
  internal_handler_user_transport.CreateRequest:
    properties:
      password:
        type: string
      role_ids:
        items:
          type: integer
        minItems: 1
        type: array
      username:
        type: string
    required:
    - password
    - role_ids
    - username
    type: object
  internal_handler_user_transport.UpdateRequest:
    properties:
      password:
        type: string
      role_ids:
        items:
          type: integer
        type: array
      username:
        type: string
    required:
    - password
    - role_ids
    - username
    type: object
host: localhost:8090
info:
  contact: {}
  description: This is the API documentation for the Viettel Cyber Security - Server
    Management System.
  title: Viettel Cyber Security - Server Management System
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Authenticates user and returns a JWT token.
      parameters:
      - description: Login credentials
        in: body
        name: LoginRequest
        required: true
        schema:
          $ref: '#/definitions/internal_handler_auth_transport.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid input
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: User login
      tags:
      - Authentication
  /servers:
    get:
      consumes:
      - application/json
      description: Returns a list of servers based on the provided filters and pagination.
      parameters:
      - default: 10
        description: Limit of servers returned
        in: query
        name: limit
        type: integer
      - default: 0
        description: Ofset in server list
        in: query
        name: offset
        type: integer
      - description: Filter by status
        in: query
        name: status
        type: string
      - description: Field to sort by
        in: query
        name: field
        type: string
      - description: Order by
        enum:
        - asc
        - desc
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/internal_handler_server_transport.ServerResponse'
            type: array
        "400":
          description: Bad request - Invalid parameters for limit or offset or status
            or field or order
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: 'Failed to fetch servers: No servers found based on the filters
            provided or server does not exist'
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal server error - Failed to fetch servers
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - Bearer: []
      summary: Get servers
      tags:
      - Server
    post:
      consumes:
      - application/json
      description: Creates a new server in the database based on the provided data.
      parameters:
      - description: Server data
        in: body
        name: server
        required: true
        schema:
          $ref: '#/definitions/internal_handler_server_transport.CreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/github_com_mxngocqb_VCS-SERVER_back-end_internal_model.Server'
        "400":
          description: Bad request - Invalid server data
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden - User does not have permission to create server
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal server error - Failed to create serve
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - Bearer: []
      summary: Create server
      tags:
      - Server
  /servers/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a server from the database based on the provided ID.
      parameters:
      - description: Server ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "403":
          description: Forbidden - User does not have permission to delete server
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not found - Not found server with the provided ID
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal server error - Failed to Delete server
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - Bearer: []
      summary: Delete server by ID
      tags:
      - Server
    put:
      consumes:
      - application/json
      description: Updates a server in the database based on the provided ID.
      parameters:
      - description: Server ID
        in: path
        name: id
        required: true
        type: integer
      - description: Server update data
        in: body
        name: server
        required: true
        schema:
          $ref: '#/definitions/internal_handler_server_transport.UpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_mxngocqb_VCS-SERVER_back-end_internal_model.Server'
        "400":
          description: Bad request - Invalid update data
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden - User does not have permission to update server
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not found - Server not found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal server error - Failed to update server
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - Bearer: []
      summary: Update server by ID
      tags:
      - Server
  /servers/{id}/uptime:
    get:
      consumes:
      - application/json
      description: Returns the total hours of uptime for a specific server on a given
        date.
      parameters:
      - description: Server ID
        in: path
        name: id
        required: true
        type: integer
      - description: Date
        in: query
        name: date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Total hours of uptime for the server on the specified date
          schema:
            type: number
        "400":
          description: Invalid server ID or date format
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal server error occurred while fetching uptime
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - Bearer: []
      summary: Get server uptime based on date and server ID
      tags:
      - Server
  /servers/export:
    get:
      description: Exports server data to an Excel file based on the provided filters.
      parameters:
      - default: 10
        description: Limit of servers returned
        in: query
        name: limit
        type: integer
      - default: 0
        description: Ofset in server list
        in: query
        name: offset
        type: integer
      - description: Filter by status
        in: query
        name: status
        type: string
      - description: Field to sort by
        in: query
        name: field
        type: string
      - description: Order by
        enum:
        - asc
        - desc
        in: query
        name: order
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: Excel file containing server data
          schema:
            type: file
        "400":
          description: Bad request - Invalid parameters for limit or offset or status
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden - User does not have permission to export servers
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Bad request - No servers found based on the filters provided
            or server does not exist
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "409":
          description: Conflict - Failed to generate or send file
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal server error - Failed to generate or send file
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - Bearer: []
      summary: Export servers to Excel
      tags:
      - Server
  /servers/import:
    post:
      consumes:
      - multipart/form-data
      description: Imports server data from an Excel file and creates multiple servers.
      parameters:
      - description: Excel file containing server data
        in: formData
        name: listserver
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_handler_server_transport.ImportServerResponse'
        "400":
          description: Bad request - Failed to read or open file
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden - User does not have permission to import servers
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal server error - Failed to parse Excel or create servers
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - Bearer: []
      summary: Import servers from Excel
      tags:
      - Server
  /servers/report:
    get:
      consumes:
      - application/json
      description: Send a report of daily server statuses from the specified date
        range to the provided email.
      parameters:
      - description: From Date
        in: query
        name: start
        required: true
        type: string
      - description: To Date
        in: query
        name: end
        required: true
        type: string
      - description: Administrator Email
        in: query
        name: mail
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sent report to administrator email successfully
          schema:
            type: string
        "400":
          description: Invalid administrator email or date range
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal server error occurred while generating report
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - Bearer: []
      summary: Send daily server report to administator email
      tags:
      - Server
  /users:
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: Create User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/internal_handler_user_transport.CreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/github_com_mxngocqb_VCS-SERVER_back-end_internal_model.User'
        "400":
          description: Bad Request - Invalid user data
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden - Insufficient permissions
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error - Unable to create user
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - Bearer: []
      summary: Create user
      tags:
      - Users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "403":
          description: Forbidden - Insufficient permissions
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found - User not found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error - Unable to delete user
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - Bearer: []
      summary: Delete user
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Get details of a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_mxngocqb_VCS-SERVER_back-end_internal_model.User'
        "400":
          description: Bad Request - Invalid user ID format
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found - User not found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error - Unable to retrieve user
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - Bearer: []
      summary: View user
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/internal_handler_user_transport.UpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_mxngocqb_VCS-SERVER_back-end_internal_model.User'
        "400":
          description: Bad Request - Invalid user data or ID
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden - Insufficient permissions
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found - User not found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error - Unable to update user
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - Bearer: []
      summary: Update user
      tags:
      - Users
schemes:
- http
- https
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
